#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
//cpp程序在执行时，将内存大方向分为4个区域
//1.代码区：存放函数体的二进制代码，由操作系统进行管理
//2.全局区：存放全局变量和静态变量以及常量
//3.栈区：由编译器自动分配释放，存放函数的参数值，局部变量等
//4.堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收

//内存四区意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程

//1.1 程序运行前
//在程序编译后，生成了.exe可执行程序，未执行该程序前分为两个区域

//代码区：
//存放CPU执行的机器指令
//代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
//代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令

//全局区
//全局变量和静态变量存放在此
//全局区还包含了常量区，字符串常量和其他常量也存放在此
//该区域的数据在程序结束后由操作系统释放
//总结：
//不在全局区中：局部变量、const修饰的局部变量
//在全局区中的：全局变量、静态变量(static关键字)、常量（字符串常量、const修饰的全局变量(全局常量)）

//小结
//C++中在程序运行前分为全局区和代码区
//代码区的特点是共享和只读
//全局区中存放全局变量、静态变量、常量
//常量区中存放const修饰的全局常量和字符串常量


//1.2 程序运行后
//栈区数据注意事项：不要返回局部变量的地址
//eg:
int* fun(int b)//形参数据也会放在栈区
{
	b = 100;
	int a = 10;//局部变量  存放在栈区，栈区的数据在函数执行完后自动释放
	return &a;
}
int main()
{
	int b = 0;
	int* p = fun(b);
	cout << *p << endl;//第一次可以打印正确的数字，是因为编译器做了保留
	cout << *p << endl;//第二次这个数据就不再保留了

	//继续打印10的原因：栈帧未被覆盖，当fun()返回后，局部变量a所在的内存实际还没有被其他数据覆盖。main()里指针p指向的还是原来a的位置，所以你能读到10。

	return 0;
}

//堆区：在C++中主要利用new在堆区开辟内存
int* func()
{
	int* p = new int(10);//在堆区创建数据并不是将值返回给你，而是将地址返回
	return p;
}
int main()
{
	int* p = func();
	cout << *p << endl;
	cout << *p << endl;
	cout << *p << endl;

	return 0;
}


//1.3 new操作符
//C++中利用new操作符在堆区开辟数据
//堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete
//语法：new 数据类型
//利用new创建的数据，会返回该数据对应的类型的指针
int* test()
{
	int* p = new int(10);
	return p;
}
void test2()
{
	int* arr = new int[10]; //10代表数组有10个元素
	for (int i = 0; i < 10; i++)
	{
		arr[i] = i + 100;
	}
	for (int i = 0; i < 10; i++)
	{
		cout << arr[i] << endl;
	}

	//释放堆区数组的时候，要加[]才可以
	delete[] arr;
}
int main()
{
	int* pp = test();
	cout << *pp << endl;
	cout << *pp << endl;
	//使用delete释放堆区的数据
	delete pp;
	cout << *pp << endl;//内存已经被释放，再次访问就是非法操作，会报错

	return 0;
}